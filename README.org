#+title: jinx.el - Enchanted Just-in-time Spell Checker
#+author: Daniel Mendler
#+language: en
#+export_file_name: jinx.texi
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: Jinx: (jinx).
#+texinfo_dir_desc: Enchanted just-in-time spell checker

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true"/></a>
#+html: <a href="https://elpa.gnu.org/packages/jinx.html"><img alt="GNU ELPA" src="https://elpa.gnu.org/packages/jinx.svg"/></a>
#+html: <a href="https://elpa.gnu.org/devel/jinx.html"><img alt="GNU-devel ELPA" src="https://elpa.gnu.org/devel/jinx.svg"/></a>
#+html: <a href="https://melpa.org/#/jinx"><img alt="MELPA" src="https://melpa.org/packages/jinx-badge.svg"/></a>
#+html: <a href="https://stable.melpa.org/#/jinx"><img alt="MELPA Stable" src="https://stable.melpa.org/packages/jinx-badge.svg"/></a>

Jinx is a just-in-time spell-checker for Emacs. Jinx highlights misspelled words in the text of the visible portion of the buffer. Each misspelling can then be corrected from a list of dictionary words presented as the usual completion candidates in a list.

Installing Jinx is straight-forward and configuring takes not much intervention. Jinx can safely co-exist with Emacs's built-in spell-checker.

Jinx's high performance and low resource usage comes from directly calling the widely-used API of the Enchant library (see [[https://abiword.github.io/enchant/][libenchant]]).  Jinx package automatically compiles =jinx-mod.c= and loads the dynamic module at startup. 

Jinx highlights misspellings lazily, recognizes window boundaries and text folding, if any. By binding directly to the native libenchant API, Jinx avoids the slower backend process communication with Aspell. Thanks to libenchant API, this method is widely used by text editors and supports [[https://nuspell.github.io/][Nuspell]], [[http://hunspell.github.io/][Hunspell]], [[http://aspell.net/][Aspell]] and a few lesser known
backends.  

Jinx supports spell-checking multiple languages in the same buffer. See the =jinx-languages= variable to customize. 

Jinx can flexibly ignore misspellings via faces (=jinx-exclude-faces= and =jinx-include-faces=), regular
expressions (=jinx-exclude-regexps=), and programmable predicates. Jinx comes preconfigured for the most important Emacs major modes.

#+html: <img src="https://github.com/minad/jinx/blob/screenshots/screenshot.png?raw=true">

* Installing Jinx

Jinx can be installed from GNU ELPA and MELPA directly or with =package-install=. 

Jinx requires =libenchant=. Enchant library is a required dependency for Jinx to compile its module at install time. If =pkg-config= is available, Jinx will use that to locate =libenchant=. 

On Debian or Ubuntu, install packages =libenchant-2-2=, =libenchant-2-dev= and =pkg-config=.

On Fedora or RHEL, install the package =enchant2-devel=.

On Mac or Darwin systems, install =enchant2= and =pkgconfig=.

* Using Jinx

Jinx offers two modes =global-jinx-mode= and =jinx-mode=. You can either enable
=global-jinx-mode= or add =jinx-mode= to the hooks of the modes.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'global-jinx-mode)

  (dolist (hook '(text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook hook #'jinx-mode))
#+end_src

Furthermore Jinx brings two auto-loaded commands =jinx-correct= and
=jinx-languages=. In order to correct misspellings bind =jinx-correct= to a
convenient key in your configuration. Jinx is independent of the Ispell package,
so you can reuse the binding =M-$= which is bound to =ispell-word= by default. When
pressing =M-$=, Jinx offers correction suggestions for the misspelling next to
point. If the prefix key =C-u= is pressed, the entire buffer is spell-checked.

#+begin_src emacs-lisp
  (keymap-global-set "<remap> <ispell-word>" #'jinx-correct)
#+end_src

* Enchant backends and personal dictionaries

Enchant uses different backends depending on the language. The ordering of the
backends is configured by the file =~/.config/enchant/enchant.ordering=. For most
languages Hunspell is used by default. Depending on the backend the personal
dictionary will be taken from different locations, e.g., =~/.aspell.LANG.pws= or
=~/.config/enchant/=. It is possible to symlink different personal dictionaries
such that they are shared by different spell checkers. See the [[https://abiword.github.io/enchant/src/enchant.html][Enchant manual]]
for more details.

* Alternatives

- [[https://github.com/astoff/jit-spell][jit-spell]]: Jinx offers a similar UI as Augusto Stoffel's jit-spell package and
  borrows ideas from it. Jit-spell uses Ispell process communication instead of
  a native API. It does not restrict the highlighting to the visible text. In my
  setup I observed an increase in load and latency as a consequence, in
  particular in combination with stealth locking and commands which trigger
  fontification eagerly like =consult-line= from my [[https://github.com/minad/consult][Consult]] package.

- [[https://codeberg.org/ideasman42/emacs-spell-fu][spell-fu]]: The technique to spell-check only the visible text was inspired by
  Campbell Barton's spell-fu package. Spell-fu maintains the dictionary itself
  via a hash table, which results in high memory usage for languages with
  compound words or inflected word forms. In Jinx we avoid the complexity of
  managing the dictionary and access the advanced spell-checker algorithms
  directly via libenchant (affixation, compound words, etc.).

- flyspell: Flyspell is a builtin package which highlight misspellings while
  typing and when you move the cursor to a word. Jinx uses a different mode of
  operation, where the entire visible text of the buffer is checked always.

* Contributions

Since this package is part of [[https://elpa.gnu.org/packages/jinx.html][GNU ELPA]] contributions require a copyright
assignment to the FSF.
